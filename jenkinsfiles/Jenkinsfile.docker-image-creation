pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE_NAME = "static-site"
        DOCKERHUB_USERNAME = "karanthakkar09"
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'git config --global user.email "jenkins@jkops.com"'
                sh 'git config --global user.name "Jenkins"'
                
                git branch: 'master', url: 'https://github.com/cyse7125-sp25-team02/static-site', credentialsId: 'github-credentials'
            }
        }

        stage('Semantic Git Release') {
            steps {
                script {
                    def output
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                        output = sh(script: "npx semantic-release --repository-url https://${GITHUB_TOKEN}@github.com/cyse7125-sp25-team02/static-site.git", returnStdout: true).trim()
                        env.APP_VERSION = output.split('\n').find { it.contains("The next release version is") }?.split(' ').last()
                    }
                }
            }
        }

        stage('Build Docker Builder Image') {
            steps {
                script {
                    sh """
                        docker buildx create --name mybuilder --use
                        docker buildx inspect --bootstrap
                    """
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh """
                        echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin
                        docker buildx build \
                            --platform linux/amd64,linux/arm64 \
                            -t ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.APP_VERSION} \
                            -t ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest \
                            --push .
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                sh """
                    docker buildx rm mybuilder || true
                    docker system prune -f
                    docker logout
                """
            }
        }
        success {
            echo "Pipeline completed successfully! Docker image ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.APP_VERSION} pushed to Docker Hub."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
